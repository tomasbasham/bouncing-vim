" ##############################################################################
" ############################### TMUX.CONF ####################################
" ##############################################################################

" ==========================================
" === Vim/tmux integreation old solution ===
" ==========================================
" 
" #!/usr/bin/env bash
" # Like `tmux select-pane`, but if Vim is running in the current pane it sends a
" # keystroke to Vim instead to let it decide whether it's going to switch windows
" # internally or switch tmux panes.
" # Modified for arrow keys:
" # <https://github.com/henrik/dotfiles/blob/24ddbd90f75a2383400ef2c912b9ab8a5d5e9fc8/bin/tmux-vim-select-pane>
" # https://gist.github.com/mislav/5189704
" set -e
" 
" # gets the tty of active tmux pane
" active_tty="$(tmux list-panes -F '#{pane_active}#{pane_tty}' | grep '^1')"
" 
" # checks if there's a foreground Vim process in attached to that tty
" if ps c -o 'state=,command=' -t "${active_tty#1}" | grep '+' | grep -iE '\bvim?\b' >/dev/null ; then
"   # direction="$(echo "${1#-}" | tr 'lLDUR' '\\hjkl')"
"   direction="$(echo "${1#-}" | sed -e 's/D/Down/' -e 's/U/Up/' -e 's/L/Left/' -e 's/R/Right/')";
"   # forward the keystroke to Vim
"   tmux send-keys C-$direction
" else
"   tmux select-pane "$@"
" fi
" 
" # # Smart pane switching with awareness of vim splits. (M is Alt in gnome-terminal)
" # bind-key -n M-Up    run-shell 'tmux-vim-select-pane -U'
" # bind-key -n M-Down  run-shell 'tmux-vim-select-pane -D'
" # bind-key -n M-Left  run-shell 'tmux-vim-select-pane -L'
" # bind-key -n M-Right run-shell 'tmux-vim-select-pane -R' 
" 
" ==================
" === Use CTRL-A ===
" ==================
" It may conflicts with vim setup and with 'beginning of line' on Mac
" unbind C-b
" set -g prefix C-a

" ================
" === Resizing ===
" ================
"
" Rather than constraining window size to the maximum size of any client
" connected to the *session*, constrain window size to the maximum size of any
" client connected to *that window*. Much more reasonable.
" <https://mutelight.org/practical-tmux>
" setw -g aggressive-resize on

" ===================
" === X clipboard ===
" ===================
" Copy the current tmux buffer to the system clipboard.
" Of course first copy the selection to the tmux buffer (see vim keybindings).
" http://grota.github.io/blog/2012/05/08/tmux-clipboard-integration/
" http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
" http://unix.stackexchange.com/questions/48631/copy-to-x-clipboard-shortcut-in-tmux-conf
"
" This has been superseded in tmux 1.8, see vim keybindings
" bind-key C-c run "tmux show-buffer | xclip -selection clipboard -i"
" bind-key C-c run-shell "tmux show-buffer | xsel --clipboard --input"

################################################################################
### VIM BUILD DEPENDENCIES #####################################################
################################################################################

# Dependencies of vim-gnome package 
# result of apt-get download vim-gnome && dpkg -I vim-gnome_7.3.429-2ubuntu2.1_amd64.deb 

# Required

# libacl1              (>=   2.2.51-5)
# libc6                (>=   2.15)
# libgpm2              (>=   1.20.4)
# libice6              (>=   1:1.0.0)
# liblua5.1-0
# libperl5.14          (>=   5.14.2)
# libpython2.7         (>=   2.7)
# libruby1.8           (>=   1.8.7.352)
# libselinux1          (>=   1.32)
# libsm6
# libtinfo5
# libx11-6
# libxt6

# Not required for terminal version

    # vim-gui-common       (=    2:7.3.429-2ubuntu2.1)
    # vim-common           (=    2:7.3.429-2ubuntu2.1)
    # vim-runtime          (=    2:7.3.429-2ubuntu2.1)
    # libbonoboui2-0       (>=   2.15.1)
    # libgdk-pixbuf2.0-0   (>=   2.22.0)
    # libglib2.0-0         (>=   2.12.0)
    # libgnome2-0          (>=   2.17.3)
    # libgnomeui-0         (>=   2.22.0)
    # libgtk2.0-0          (>=   2.24.0)
    # libpango1.0-0        (>=   1.14.0)
    # tcl8.5               (>=   8.5.0)

--------------------------------------------------------------------------------

# "Depends" field for the DEBIAN/control file
#
# exuberant-ctags (>= 5.9)
# git (>= 1.7.9.5-1)
# libacl1 (>= 2.2.51-5)
# libc6 (>= 2.15)
# libgpm2 (>= 1.20.4)
# liblua5.1-0
# libncurses5 (>= 5.9-4)
# libperl5.14 (>= 5.14.2)
# libpython2.7 (>= 2.7)
# libruby1.9.1
# libselinux1 (>= 1.32)
# libsm6
# libtinfo5
# libx11-6
# libxt6
#
# libxpm4 (>= 3.5.9-4)
# libruby1.9.1 (>= 1.9.3.0)

--------------------------------------------------------------------------------
# Result of apt-cache showpkg vim-gnome

# 2:7.3.429-2ubuntu2.1
# vim-gui-common (5 2:7.3.429-2ubuntu2.1)
# vim-common (5 2:7.3.429-2ubuntu2.1)
# vim-runtime (5 2:7.3.429-2ubuntu2.1)
# libacl1 (2 2.2.51-5)
# libbonoboui2-0 (2 2.15.1)
# libc6 (2 2.15)
# libgdk-pixbuf2.0-0 (2 2.22.0)
# libglib2.0-0 (2 2.12.0)
# libgnome2-0 (2 2.17.3)
# libgnomeui-0 (2 2.22.0)
# libgpm2 (2 1.20.4)
# libgtk2.0-0 (2 2.24.0)
# libice6 (2 1:1.0.0)
# liblua5.1-0 (0 (null))
# libpango1.0-0 (2 1.14.0)
# libperl5.14 (2 5.14.2)
# libpython2.7 (2 2.7)
# libruby1.8 (2 1.8.7.352)
# libselinux1 (2 1.32)
# libsm6 (0 (null))
# libtinfo5 (0 (null))
# libx11-6 (0 (null))
# libxt6 (0 (null))
# tcl8.5 (2 8.5.0)
# cscope (0 (null))
# vim-doc (0 (null))
# ttf-dejavu (0 (null))
# gnome-icon-theme (0 (null))
# vim-gnome:i386 (0 (null))

# 2:7.3.429-2ubuntu2
# vim-gui-common (5 2:7.3.429-2ubuntu2)
# vim-common (5 2:7.3.429-2ubuntu2)
# vim-runtime (5 2:7.3.429-2ubuntu2)
# libacl1 (2 2.2.51-5)
# libbonoboui2-0 (2 2.15.1)
# libc6 (2 2.15)
# libgdk-pixbuf2.0-0 (2 2.22.0)
# libglib2.0-0 (2 2.12.0)
# libgnome2-0 (2 2.17.3)
# libgnomeui-0 (2 2.22.0)
# libgpm2 (2 1.20.4)
# libgtk2.0-0 (2 2.24.0)
# libice6 (2 1:1.0.0)
# liblua5.1-0 (0 (null))
# libpango1.0-0 (2 1.14.0)
# libperl5.14 (2 5.14.2)
# libpython2.7 (2 2.7)
# libruby1.8 (2 1.8.7.352)
# libselinux1 (2 1.32)
# libsm6 (0 (null))
# libtinfo5 (0 (null))
# libx11-6 (0 (null))
# libxt6 (0 (null))
# tcl8.5 (2 8.5.0)
# cscope (0 (null))
# vim-doc (0 (null))
# ttf-dejavu (0 (null))
# gnome-icon-theme (0 (null))
# vim-gnome:i386 (0 (null))

" ##############################################################################
" ################################# VIMRC ######################################
" ##############################################################################

" ==============================
" === Quickfix list mappings ===
" ==============================

* Quickfix list
  - open in vertical and horizontal splits with `<C-v>` and `<C-s>`

" Initial idea from http://stackoverflow.com/questions/16743112/open-item-from-quickfix-window-in-vertical-split/16743676#16743676

function SetOpenQuickfixItemsInSplits()
  nnoremap <buffer> <C-v> <C-w>k \| :vs<CR> \| <C-w>j \| <CR>
  nnoremap <buffer> <C-s> <C-w>k \| :sp<CR> \| <C-w>j \| <C-w>j \| <CR>
endfunction

autocmd! FileType qf call SetOpenQuickfixItemsInSplits()

# Alternative pathogen installation
-----------------------------------
# git clone https://github.com/tpope/vim-pathogen.git ~/.vim/vim-pathogen
# ln -sf ~/.vim/vim-pathogen/autoload/pathogen.vim ~/.vim/autoload/pathogen.vim

" ==================
" === Leader key ===
" ==================

" Map leader key to the customary comma...
" let mapleader=','
" ...without overriding it
" nmap \ ,
" vmap \ ,
"
" ======================
" === Search options ===
" ======================

" Center the next/previous search result
" confusing in some situations, disabled for now
" nmap n nzz
" nmap N Nzz

" Automatically add \v when searching so that regexp acts more like in perl
" Warning: this will require to escape '<' and '>' charachters when
" looking for git conflicts; in this case it's just easier to press backspace
" twice before typing <<<< or >>>>
" nnoremap / /\v
" vnoremap / /\v

" ===================
" === Colorscheme ===
" ===================

" set the TERM to 'screen-256color' in the .bashrc:
" This will break 16-color colorschemes, but will make solarized work
" correctly, including the statusbar.
"
"   if [[ -n "$TMUX" ]]; then
"     export TERM=screen-256color
"   else
"     export TERM=xterm-256color
"   fi

" " Disable Background Color Erase (BCE) so that color schemes
" " work properly when Vim is used inside tmux and GNU screen.
" " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
" if &term =~ '256color'
"   set t_ut=
" endif

" set background=dark
" let g:molokai_original = 1
" colorscheme molokai

" colorscheme noctu

" colorscheme base16-solarized

" colorscheme default

colorscheme agnostic

" =============================
" === Solarized colorscheme ===
" =============================

" Force solarized display sensibly when the terminal emulator has a custom
" palette.
" These can be avoided if the terminal emulator has solarized palette.
" Use t_Co=16 instead if the terminal has a 16 solarized palette.
" set t_Co=256
" let g:solarized_termcolors=256
" let g:solarized_termcolors=16
" set term=screen-256color " try this as a last resort

""" -> Uncomment the following two lines for 16-color terminal solarized
" set background=dark " or light
" colorscheme solarized
""" -> Additional solarized options for 256-colors
" let g:solarized_underline=0
" let g:solarized_italic=0
" let g:solarized_bold=0
" let g:solarized_contrast="high"
" let g:solarized_visibility="high"
" let g:solarized_termtrans=1 " transparent terminal support

" ====================
" === Other colors ===
" ====================
"
" " To override the colors from the colorscheme, simply hightlight may not work
" " <http://stackoverflow.com/a/7383051/417375>
" "
" " Make the normal color a little brighter
" autocmd ColorScheme * highlight Normal ctermfg=253
"
" " NonText => eol, extends, precedes, and after last line
" " autocmd ColorScheme * highlight NonText ctermfg=232 ctermbg=238
" " SpecialKey => nbsp, tab and trail
" autocmd ColorScheme * highlight SpecialKey ctermfg=232 ctermbg=238
" autocmd ColorScheme * highlight StatusLine cterm=bold ctermfg=white ctermbg=240

" autocmd ColorScheme * highlight clear SignColumn
" autocmd ColorScheme * highlight VertSplit ctermbg=236
" autocmd ColorScheme * highlight ColorColumn ctermbg=237
" autocmd ColorScheme * highlight LineNr ctermbg=236 ctermfg=240
" autocmd ColorScheme * highlight CursorLineNr ctermbg=236 ctermfg=240
" autocmd ColorScheme * highlight CursorLine ctermbg=236
" autocmd ColorScheme * highlight StatusLineNC ctermbg=238 ctermfg=0
" autocmd ColorScheme * highlight StatusLine ctermbg=240 ctermfg=12
" autocmd ColorScheme * highlight IncSearch ctermbg=0 ctermfg=3
" autocmd ColorScheme * highlight Search ctermbg=0 ctermfg=9
" autocmd ColorScheme * highlight Visual ctermbg=3 ctermfg=0
" autocmd ColorScheme * highlight Pmenu ctermbg=240 ctermfg=12
" autocmd ColorScheme * highlight PmenuSel ctermbg=0 ctermfg=3
" autocmd ColorScheme * highlight SpellBad ctermbg=0 ctermfg=1

" ==============
" === Basics ===
" ==============

" set history=1000 " already in vim-sensible
" filetype plugin indent on " already in vim-sensible
" syntax on " already in vim-sensible

" ============================
" === Fix keys inside tmux ===
" ============================

" <http://stackoverflow.com/questions/16638962/sending-ctrl-right-to-vim-inside-tmux/16640087#16640087>
" 
" I got something working though I'm very much treading unknown territory here. 
" Perhaps someone else can fill in the rest.
" 
" The first difference I noticed when starting up Vim in the terminal and Vim 
" inside tmux was in their 'term' setting.
" 
" When asked :set term?, ordinary terminal Vim answered xterm-256color, but tmux 
" Vim answered screen. It's important to understand that the exact key codes 
" sent in the terminal depend on the type of the terminal.
" 
" One solution is simply to make tmux and Vim speak the same language. In tmux:
" 
"     set-option -gw xterm-keys on
"     bind-key -n C-Right send-keys C-Right
" 
" In Vim:
" 
"     :set term=xterm-256color
" 
" Now Vim and tmux understand each other's terminal key codes and your key strokes 
" will make it all the way to Vim.

" <http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/FAQ>
" => * How do I make Ctrl-PgUp and Ctrl-PgDn work in vim?
" if &term == "screen"
"   set t_kN=^[[6;*~
"   set t_kN=[5~
"   set t_kP=^[[5;*~
" endif

" 
" map [1;6C <C-S-Right>
" map [1;6D <C-S-Left>
" map [1;6A <C-S-Up>
" map [1;6B <C-S-Down>

" map OD <Left>
" map OC <Right>
" map [D <C-Left>
" map [C <C-Right>
" map OA <Up>
" map OB <Down>
" map [A <C-Up>
" map [B <C-Down>

" map [1;2C <S-Right>
" map [1;2D <S-Left>
" map [1;2A <S-Up>
" map [1;2B <S-Down>

" map [1;5A <C-Up>
" map [1;5B <C-Down>
" map [1;5C <C-Right>
" map [1;5D <C-Left>

" map [1;3A <M-Up>
" map [1;3B <M-Down>
" map [1;3C <M-Right>
" map [1;3D <M-Left> 

" Keybindings
" <Leader>v selects the last pasted text
" nnoremap <Leader>v `[V`]             " <Leader>v selects the just pasted text
" nnoremap <Leader>v V`]             " <Leader>v selects the just pasted text

"""""""""""""""
" Arrows keys "
"""""""""""""""
" Option 1:
" http://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux/562437#562437
"
" Disable Background Color Erase (BCE) by clearing the t_ut terminal option
" (run :set t_ut= in Vim and then press Control+L to refresh the terminal's
" display) so that color schemes work properly when Vim is used inside tmux
" and GNU screen.
"
" This way, you can keep your TERM value as xterm-256color for proper key
" detection while also getting proper Vim color scheme rendering too
" set t_ut=
"
" Option 2: see the actual vim file here

" ============
" === Tabs ===
" ============
" http://stackoverflow.com/questions/102384/using-vims-tabs-like-buffers/3476411#3476411
" tab sball
" set switchbuf=usetab,split
" open every buffer in its own tab
" au BufAdd,BufNewFile,BufRead * nested tab sball
" autocmd BufAdd,BufNewFile * nested tab sball

" Tab navigation like in Firefox
" Notice that 'sbnext' and 'sbprevious' would reopen closed tabs instead.
" Used for the buffers instead.
" nnoremap <C-Pageup>   :tabprevious<cr>
" nnoremap <C-Pagedown> :tabnext<cr>
" inoremap <C-Pageup>   :tabprevious<cr>
" inoremap <C-Pagedown> :tabnext<cr>

" <http://stackoverflow.com/questions/2468939/how-to-let-tab-display-only-file-name-rather-than-the-full-path-in-vim>
" set guitablabel=\[%N\]\ %t\ %M

" ===============
" === Buffers ===
" ===============

" ...next
" nnoremap <C-j> :bn<cr>
" ...previous
" nnoremap <C-k> :bp<cr>

" " ...with Alt key instead...
" nnoremap <M-Pagedown> :bn<CR>
" inoremap <M-Pagedown> :bn<CR>
" vnoremap <M-Pagedown> :bn<CR>
" nnoremap <M-Pageup>   :bp<CR>
" inoremap <M-Pageup>   :bp<CR>
" vnoremap <M-Pageup>   :bp<CR>

" ==================================
" === Move between split windows ===
" ==================================
" <http://vim.wikia.com/wiki/Switch_between_Vim_window_splits_easily>
" nmap <silent> <M-Up> :wincmd k<CR>
" nmap <silent> <M-Down> :wincmd j<CR>
" nmap <silent> <M-Left> :wincmd h<CR>
" nmap <silent> <M-Right> :wincmd l<CR>

" =================
" === Clipboard ===
" =================
" set clipboard=unnamedplus
" ctrl-v conflicts with visual block, and is not very useful anyway
" nnoremap <C-e> "+gP
" inoremap <C-e> <Esc>"+gPi
" TODO: not working
" nnoremap <Leader>o "+gP
" vnoremap <Leader>y "+y

" ========================================
" === External commands without prompt ===
" ========================================
" To make the shell interactive (to support local aliases) follow these steps:
" 1 - set the shell flags
" http://stackoverflow.com/questions/4642822/commands-executed-from-vim-are-not-recognizing-bash-command-aliases/4642855#4642855
" set shellcmdflag=-itc
" 2 - modify the execute line adding a call to "fg" (foreground vim)
"command! -nargs=1 Silent
"      \ | execute ':silent !'.<q-args>.'; fg'
"      \ | execute ':redraw!'

" ============================
" === Close all the buffers ===
" ============================
" https://github.com/bryankennedy/vimrc/blob/master/vimrc
" this does not work well because closes everything, and messes up badly with nerdtree for instance
" nnoremap bda :1,300 bd<CR>

" ===================
" === Real delete ===
" ===================
" nnoremap <C-f> "_dd
" This is not handy, because the leader has to be released to repeat the
" action.
" nnoremap <leader>d "_dd
" vnoremap <leader>d "_d

" TODO: does not work
" inoremap <M-d> <Esc>"_ddi

" =========================
" === Switch buffers... ===
" =========================
" ...as if they were tabs, for some Vim users
" nnoremap <S-h> :bp<CR>
" nnoremap <S-l> :bn<CR>

" ====================
" === Bubble lines ===
" ====================
" The following should not be used, has the disadvantage of deleting lines at the ends of the buffer.
" http://vimcasts.org/episodes/bubbling-text/
" " ...single lines
" nmap <C-Up> ddkP
" nmap <C-Down> ddp
" " ...multiple lines
" vmap <C-Up> xkP`[V`]
" vmap <C-Down> xp`[V`]

" http://reefpoints.dockyard.com/2013/09/26/vim-moving-lines-aint-hard.html
" Normal mode
" nnoremap <C-Down> :m .+1<CR>==
" nnoremap <C-Up> :m .-2<CR>==

" Insert mode
" inoremap <C-Down> <ESC>:m .+1<CR>==gi
" inoremap <C-Up> <ESC>:m .-2<CR>==gi

" Visual mode
" vnoremap <C-Down> :m '>+1<CR>gv=gv
" vnoremap <C-Up> :m '<-2<CR>gv=gv

" ==========================
" === Save with shortcut ===
" ==========================
"
" other good option: save in the middle of typing and automatically confirm (second CR)
" inoremap <C-s> <c-o>:Update<CR><CR>

" ==================================
" === Autowrite, Backup and Undo ===
" ==================================
" This probably won't work in the terminal.
" augroup save
"   autocmd!
"   autocmd FocusLost * wall
"   " or suppress warnings for untitled and read-only buffers
"   " au FocusLost * silent! wa
" augroup END
"
" set autowriteall

" Save swap and undo files elsewhere
" create the dirs if they don't exist, trick from
" <https://github.com/ahawkins/dotfiles/blob/master/vimrc>
" silent !mkdir ~/.vim/swap > /dev/null 2>&1
" silent !mkdir ~/.vim/undo > /dev/null 2>&1
" set backupdir=~/.vim/swap/
" set undodir=~/.vim/undo/
" set undofile " persistent-undo
" set noundofile

" ====================
" === Code folding ===
" ====================
" http://smartic.us/2009/04/06/code-folding-in-vim/
" fold based on syntax
" set foldmethod=syntax
" deepest fold is 7 levels
" set foldnestmax=7
" 2 columns is considered the minumum useful value, although 1 can still serve
" set foldcolumn=0
" no folds are closed when opening a file: can be done in two ways
" - option 1
" set nofoldenable
" - option 2
" set foldlevelstart=99
" set foldlevel=1

" " <http://learnvimscriptthehardway.stevelosh.com/chapters/38.html>
" function! ToggleFoldAndNumbers()
"   " Toggle line numbers
"   setlocal number!

"   " Toggle fold column
"   if &foldcolumn
"     setlocal foldcolumn=0
"   else
"     setlocal foldcolumn=2
"   endif
" endfunction

" nnoremap <leader>z :call ToggleFoldAndNumbers()<cr>

" ====================
" === View options ===
" ====================
" wrap long lines
" set wrap
" ensure newline and the end of file (the default anyway)
" set eol
" Colors of the vertical rulers
" " To set the colors in a terminal version of Vim, add the following to .vimrc:
" " To see the available color names, issue the command :help ctermbg.
" highlight ColorColumn ctermbg=DarkGray

" set cursorcolumn
" set virtualedit=all

" ==========================
" === Search and Replace ===
" ==========================
" Don't wrap around (don't start from the beginning when reached the end)
" set nowrapscan
" clear search results pressing space or with the return key
" (destroy all software trick) (but this interferes with Ack-vim, can't use
" enter to go to the result)
" nnoremap <CR> :nohlsearch<CR>

" ================================
" === Search visually selected ===
" ================================

" <http://amix.dk/vim/vimrc.html>
" Visual mode pressing * or # searches for the current selection
" vnoremap <silent> * :call VisualSelection('f')<CR>
" vnoremap <silent> # :call VisualSelection('b')<CR>
"
" function! VisualSelection(direction) range
"     let l:saved_reg = @"
"     execute "normal! vgvy"
"
"     let l:pattern = escape(@", '\\/.*$^~[]')
"     let l:pattern = substitute(l:pattern, "\n$", "", "")
"
"     if a:direction == 'b'
"         execute "normal ?" . l:pattern . "^M"
"     elseif a:direction == 'gv'
"         call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
"     elseif a:direction == 'replace'
"         call CmdLine("%s" . '/'. l:pattern . '/')
"     elseif a:direction == 'f'
"         execute "normal /" . l:pattern . "^M"
"     endif
"
"     let @/ = l:pattern
"     let @" = l:saved_reg
" endfunction

" =========================
" === Misc key mappings ===
" =========================
" Map :W to :update (save only when the buffer has been modified)
" Bad idea, because it will replace the letter 'W' with the word 'update'
" ANYWHERE in any command...
" cnoremap W update
" Map :Q to 'no op', effectively disabling it
" noremap Q <Nop>

" ===================
" === Buffergator ===
" ===================
let g:buffergator_viewport_split_policy='B'
let g:buffergator_split_size=10
let g:buffergator_suppress_keymaps=1
noremap <Leader>b :BuffergatorToggle<CR>

" =============
" === CtrlP ===
" =============

" <http://robots.thoughtbot.com/faster-grepping-in-vim>
" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
" ag is fast enough that CtrlP doesn't need to cache
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

" Custom ignore
" Examples:
"
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_custom_ignore = {
"   \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"   \ 'file': '\v\.(exe|so|dll)$',
"   \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
"   \ }
" let g:ctrlp_custom_ignore = {
"   \ 'file': '\v(\.cpp|\.h|\.hh|\.cxx)@<!$'
"   \ }

" unlet g:ctrlp_custom_ignore " this might be required if the variable type changes

" ===========
" === Ack ===
" ===========
" launch ack on current word with leader+A
" TODO: not working
" nnoremap <leader>A :Ack!<cword>

" ================
" === NERDTree ===
" ================
" From the NERDTree Readme.
" always open NERDTree when opening a file
" autocmd vimenter * NERDTree
" always open NERDTree even when there is no file open
" autocmd vimenter * if !argc() | NERDTree | endif
" close NERDTree if it is the only vim buffer open
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" the additional NerdTreeTabs plugin makes NerdTree play better with tabs
" map <leader>n <plug>NERDTreeTabsToggle<cr>

" =======================
" === MiniBufExplorer ===
" =======================
" Simplified mappings that have been replaced with functions
" " ...next
" nnoremap <C-Pagedown> :bn<CR>
" inoremap <C-Pagedown> :bn<CR>
" vnoremap <C-Pagedown> :bn<CR>
" " ...previous
" nnoremap <C-Pageup>   :bp<CR>
" inoremap <C-Pageup>   :bp<CR>
" vnoremap <C-Pageup>   :bp<CR>
" 
" " ...without Ctrl key, for mac users
" nnoremap <Leader>] :bn<CR>
" inoremap <Leader>] :bn<CR>
" vnoremap <Leader>] :bn<CR>
" nnoremap <Leader>[ :bp<CR>
" inoremap <Leader>[ :bp<CR>
" vnoremap <Leader>[ :bp<CR>

" let g:miniBufExplBuffersNeeded = 1 " open immediately, don't wait for a second buffer

" prevent MiniBufExplorer from overriding custom colours
" let g:did_minibufexplorer_syntax_inits = 1

" === Experimental from http://zzapper.co.uk/vimtips.html ===
" visual searching
" search for visually highlighted text, doesn't work well as the chosen solution
" vmap // y/<C-R>"<CR>
" ..with spec chars
" vmap <silent> // y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>

" Escape
http://peterodding.com/code/vim/profile/autoload/xolox/escape.vim
" Vim script
" Maintainer: Peter Odding <peter@peterodding.com>
" Last Change: August 31, 2010
" URL: http://peterodding.com/code/vim/profile/autoload/xolox/escape.vim

" pattern() -- convert a string into a :substitute pattern that matches the string literally {{{1

function! xolox#escape#pattern(string)
  if type(a:string) == type('')
    let string = escape(a:string, '^$.*\~[]')
    return substitute(string, '\n', '\\n', 'g')
  endif
  return ''
endfunction

" substitute() -- convert a string into a :substitute replacement that inserts the string literally {{{1

function! xolox#escape#substitute(string)
  if type(a:string) == type('')
    let string = escape(a:string, '\&~%')
    return substitute(string, '\n', '\\r', 'g')
  endif
  return ''
endfunction

" vim: ts=2 sw=2 et

" ================
" === vim-ruby ===
" ================
" see :help ft-ruby-omni
" turn on ruby evaluation for c-x c-o expansion
" let g:rubycomplete_buffer_loading = 1
" let g:rubycomplete_classes_in_global = 1
" let g:rubycomplete_rails = 1

==========================
=== Basig golang setup ===
==========================

" From the readme at $GOROOT/misc/vim/readme.txt and https://github.com/jnwhiteh/vim-golang/blob/master/readme.txt
" Some Linux distributions set filetype in /etc/vimrc.
" Clear filetype flags before changing runtimepath to force Vim to reload them.
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
syntax on

if executable('go')
  autocmd FileType go autocmd BufWritePre <buffer> Fmt
  " Activate the compiler plugin with ":compiler go". To always enable the
  " compiler plugin in Go source files:
  " autocmd FileType go compiler go
endif
